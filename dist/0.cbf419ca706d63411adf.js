(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{68:function(e,t,c){"use strict";c.d(t,"a",(function(){return a}));var n=c(0);c(69);const a=(e,t,c,a)=>{let o=Object(n.c)("div","project-img"),i=Object(n.c)("div","img-wrapper");o.appendChild(i);let d=Object(n.c)("div","inner-img-wrap");if(i.appendChild(d),d.appendChild(Object(n.c)("img","img")).src=e,!0===c){let e=d.appendChild(Object(n.c)("div","modal"));e.classList.add("project-modal","modal-slide");e.appendChild(Object(n.c)("span","modal-span")),e.childNodes[0].appendChild(Object(n.c)("h2","project-title"));e.childNodes[0].childNodes[0].innerText=t}return o}},69:function(e,t,c){var n=c(1),a=c(70);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},i=(n(a,o),a.locals?a.locals:{});e.exports=i},70:function(e,t,c){},71:function(e,t,c){"use strict";c.d(t,"a",(function(){return o}));var n=c(3);const a=Object(n.a)();let o=async e=>await fetch(`${a}/technologies`).then(e=>e.json()).then(e=>e)},72:function(e,t,c){"use strict";c.d(t,"c",(function(){return o})),c.d(t,"a",(function(){return i})),c.d(t,"d",(function(){return d})),c.d(t,"b",(function(){return s}));var n=c(3);const a=Object(n.a)();let o=async()=>await fetch(`${a}/projects`).then(e=>e.json()).then(e=>e);const i=async e=>{console.log("ere"),console.log(JSON.stringify(e));const t=await fetch(`${a}/projects`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)},d=async(e,t)=>{console.log(JSON.stringify(e));await fetch(`${a}/projects/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},s=async e=>{const t=await fetch(`${a}/projects/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)}},73:function(e,t,c){"use strict";c.d(t,"c",(function(){return a})),c.d(t,"d",(function(){return o})),c.d(t,"a",(function(){return i})),c.d(t,"b",(function(){return d})),c.d(t,"e",(function(){return s}));var n=c(0);const a=e=>{let t=Object(n.d)("form");return t.className=e,t},o=e=>{const{className:t,name:c,type:a,value:o,placeholder:i,handleChange:d}=e;let s=Object(n.d)("input");return s.className=t,s.name=c,s.type=a,s.value=o,s.placeholder=i,s.addEventListener("keyup",e=>{d(e)}),s},i=(e,t,c)=>{let a=Object(n.c)("button",e);return a.type=t,a.innerText=c,a},d=e=>{let{className:t,name:c,id:a,value:o,checked:i}=e;console.log(i);let d=Object(n.d)("input");return t=t,d.name=c,d.id=a,d.value=o,d.type="checkbox","checked"===i&&d.setAttribute("checked",""),d},s=(e,t,c)=>{let a=Object(n.d)("label");return a.className=e,a.for=c,a.innerHTML=t,a}},76:function(e,t,c){"use strict";c.r(t),c.d(t,"Projects",(function(){return r}));var n=c(0),a=c(4),o=(c(71),c(68)),i=c(72),d=c(73),s=c(77);c(78);const l=e=>{for(;e.childNodes.length;)e.removeChild(e.lastChild)};async function r(){let e=Object(n.e)(".main-content-scrollable");l(e),e.appendChild(Object(n.c)("div","loading")).innerHTML="loading...";const t=await Object(i.c)();if(l(e),t.forEach(async(t,c)=>{let l=e.appendChild(Object(n.c)("div","project-wrap")),p=(l.appendChild(Object(o.a)(`src/img/${t.img_url}`,t.name,!0,t.site_url)),"false"),h=Object(n.c)("div","link-modal"),u=Object(n.f)(".img-wrapper"),j=Object(n.f)(".inner-img-wrap"),b=Object(n.c)("div","tech-icons");t.technologies.forEach(e=>{b.appendChild(Object(n.c)("img","tech-icon")).src=`src/img/${e.icon_url}`}),h.appendChild(b);let m=h.appendChild(Object(n.c)("div","link-modal-icons"));if(m.innerHTML=`<a href=${t.site_url} target='_blank'><i class="fas fa-home fa-fw"></i></a>`,u[c].addEventListener("click",async()=>{if("true"===p)p="false",j[c].classList.add("close-curtain"),j[c].classList.remove("open-curtain"),u[c].lastChild.remove();else if("false"===p){p="true",j[c].classList.add("open-curtain"),j[c].classList.remove("close-curtain"),u[c].appendChild(h),u[c].style.setProperty("--animation","animate-img-wrapper 1.5s linear forwards"),j[c].appendChild(m)}}),await Object(a.d)()){const e=Object(n.c)("div","edit-project-wrapper"),c=Object(d.a)("show-edit-button","submit","update");c.addEventListener("click",()=>{console.log(l.lastChild.className),"edit-project-form"!==l.lastChild.className?Object(s.EditProject)(l,t):l.lastChild.remove()}),e.appendChild(c);const a=Object(d.a)("delete-project","submit","delete");a.addEventListener("click",async()=>{let e=confirm(`Are you sure you want to delete ${t.name}?`);e&&await Object(i.b)(t.id),e&&await r()}),e.appendChild(a),l.appendChild(e)}}),await Object(a.d)()){let c=Object(d.a)("show-add-form","submit","add project");c.addEventListener("click",()=>{console.log(e.lastChild.className),"show-add-form"===e.lastChild.className?Object(s.EditProject)(e,t[0],"addProject"):e.lastChild.remove()}),Object(n.b)(e,c)}}},77:function(e,t,c){"use strict";c.r(t),c.d(t,"EditProject",(function(){return s}));var n=c(73),a=c(71),o=c(72),i=c(76),d=c(0);const s=async(e,t,c)=>{if(console.log("add",c),"addProject"===c)for(let e in t)t[e]="";let s={},l=e=>{s[e.target.name]=e.target.value},r=Object(n.c)("edit-project-form"),p=Object(d.c)("div","edit-form-inputs");r.appendChild(p),Object.keys(t).forEach(e=>{if("id"!==e&&"technologies"!==e&&"created_at"!==e&&"updated_at"!==e){s[e]=t[e];const a=Object(n.d)({className:"edit-form-input",name:e,type:"text",value:"addProject"===c?"":s[e],placeholder:e,handleChange:l});p.appendChild(a)}});const h=Object(d.c)("div","edit-form-checkboxes");r.appendChild(h),(await Object(a.a)()).map(e=>{let a;void 0===c&&t.technologies.forEach(t=>{e.name===t.name&&(console.log(e.name,t.name),a="checked")});let o=Object(n.b)({className:"edit-project-chkbox",name:e.name,id:e.name,value:e.id,checked:"addProject"===c?"":a});h.appendChild(o),h.appendChild(Object(n.e)("tech-box-label",e.name,"tech-box"))}),r.appendChild(Object(n.a)("edit-project-button","submit","addProject"===c?"add new project":"submit")),Object(d.b)(e,r),r.addEventListener("submit",async e=>{e.preventDefault(),console.log("add",c);const n=document.querySelectorAll("input[type=checkbox]:checked");console.log(n),s.technologies=[],n.forEach(e=>{s.technologies.push(e.value)}),console.log("add",s),"addProject"===c?await Object(o.a)(s):await Object(o.d)(s,t.id),await Object(i.Projects)()})}},78:function(e,t,c){var n=c(1),a=c(79);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},i=(n(a,o),a.locals?a.locals:{});e.exports=i},79:function(e,t,c){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,