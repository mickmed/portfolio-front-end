(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{68:function(e,i,t){"use strict";t.d(i,"a",(function(){return o}));var l=t(0);t(69);const o=(e,i,t,o)=>{let c=Object(l.c)("div","project-img"),n=Object(l.c)("div","img-wrapper");c.appendChild(n);let d=Object(l.c)("div","inner-img-wrap");if(n.appendChild(d),d.appendChild(Object(l.c)("img","img")).src=e,!0===t){let e=d.appendChild(Object(l.c)("div","modal"));e.classList.add("project-modal","modal-slide");e.appendChild(Object(l.c)("span","modal-span")),e.childNodes[0].appendChild(Object(l.c)("h2","project-title"));e.childNodes[0].childNodes[0].innerText=i}return c}},69:function(e,i,t){var l=t(1),o=t(70);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var c={insert:"head",singleton:!1},n=(l(o,c),o.locals?o.locals:{});e.exports=n},70:function(e,i,t){},80:function(e,i,t){var l=t(1),o=t(81);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var c={insert:"head",singleton:!1},n=(l(o,c),o.locals?o.locals:{});e.exports=n},81:function(e,i,t){},85:function(e,i,t){"use strict";t.r(i),t.d(i,"Resume",(function(){return o}));t(68);var l=t(0);t(80);function o(){console.log("RESUME");let e=Object(l.e)(".main-content-scrollable");for(;e.childNodes.length;)e.removeChild(e.lastChild);let i=e.appendChild(Object(l.c)("div","resume")).appendChild(Object(l.c)("div","res-img-wrapper"));[{type:"googleDocs",icon:'<i class="fab fa-google-drive"></i>',url:"https://docs.google.com/document/d/1F0CtmV9ViPecK5KDHgKS2BZJiSy8QL6LS51BF2IaroI/edit"},{type:"linkedin",icon:'<i class="fab fa-linkedin"></i>',url:"https://www.linkedin.com/in/mick-roth"},{type:"github",icon:'<i class="fab fa-github"></i>',url:"https://github.com/mickmed"},{type:"pdf",icon:'<i class="far fa-file-pdf"></i>',url:"/"}].forEach((e,t)=>{let o=i.appendChild(Object(l.c)("div","option"));o.setAttribute("value",e.type),o.innerHTML=`<a href = ${e.url} target='_blank'>${e.icon}</a>`,o.addEventListener("mouseover",e=>{i.childNodes.forEach(e=>{e.classList.remove("highlight")}),console.log(i.childNodes[t]),o.classList.add("highlight"),console.log(o)}),o.classList.remove("highlight")})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,